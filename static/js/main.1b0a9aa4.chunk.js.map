{"version":3,"sources":["components/Header.jsx","components/AddCardForm.jsx","components/AddNewCard.jsx","utils.js","components/Card.jsx","components/List.jsx","data.js","components/Main.jsx","App.jsx","index.js"],"names":["Header","className","AddCardForm","renderedCards","setRenderedCards","setOpenForm","defaultCard","id","title","description","theme","importance","done","useState","newCard","setNewCard","resetForm","evt","currentTarget","classList","contains","reset","onSubmit","card","preventDefault","Date","now","htmlFor","onChange","target","value","type","name","minLength","placeholder","required","onClick","width","height","viewBox","fill","xmlns","d","AddNewCard","openForm","getStylesForCard","setBackgroundColor","classname","color","style","backgroundColor","Card","currentList","setCurrentList","currentCard","setCurrentCard","draggable","onDragLeave","boxShadow","dragLeaveHandler","onDragStart","list","dragStartHandler","onDragEnd","map","item","dragEndHandler","onDrop","currentIndex","indexOf","splice","dropIndex","dropHandler","filter","deleteCard","fillRule","clipRule","doneCard","find","push","makeCardDone","propType","PropTypes","shape","number","isRequired","string","bool","arrayOf","func","stringd","List","listTitle","cards","onDragOver","onDragOverHandler","length","dropCardHandler","data","Main","tracker","setTracker","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b0a9aa4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1 className=\"header\">Roadmap</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCardForm = ({renderedCards, setRenderedCards, setOpenForm}) => {\r\n\r\n  const defaultCard = {\r\n    id: null,\r\n    title: '',\r\n    description: '',\r\n    theme: '',\r\n    importance: false,\r\n    done: false,\r\n  }\r\n\r\n  const [newCard, setNewCard] = useState(defaultCard);\r\n  \r\n  const addCard = (card) => { \r\n    setRenderedCards([card, ...renderedCards])\r\n  }\r\n\r\n  const resetForm = (evt) => {\r\n    if (evt.currentTarget.classList.contains('new_card_form')) {\r\n      evt.currentTarget.reset();\r\n    }\r\n    \r\n    setNewCard(defaultCard);\r\n    setOpenForm(false);\r\n  }\r\n\r\n  const submitForm = (evt) => {\r\n    evt.preventDefault();\r\n    addCard({...newCard, id: Date.now()});\r\n    resetForm(evt);\r\n  }\r\n\r\n  return (\r\n    <form className=\"new_card_form\" onSubmit={submitForm}>\r\n      <article className=\"card form\">\r\n        <h3 className=\"card_title\">\r\n          <label htmlFor=\"title\"/>\r\n          <input \r\n            onChange={evt => setNewCard({...newCard, title: evt.target.value})}\r\n            type=\"text\" \r\n            id=\"title\" \r\n            name=\"card_title\" \r\n            minLength=\"1\" \r\n            placeholder=\"title\" \r\n            required\r\n          />\r\n        </h3>\r\n        <p className=\"card_text\">\r\n          <label htmlFor=\"text\"/>\r\n          <textarea \r\n            onChange={evt => setNewCard({...newCard, description: evt.target.value})}\r\n            type=\"text\" \r\n            id=\"text\" \r\n            name=\"card_text\" \r\n            placeholder=\"description\" \r\n          ></textarea>\r\n        </p>\r\n        <div className=\"card_bottom_wrap\">\r\n          <p className=\"card_theme\">\r\n            <label htmlFor=\"theme\"/>\r\n            <input \r\n              onChange={evt => setNewCard({...newCard, theme: evt.target.value})}\r\n              type=\"text\" \r\n              id=\"theme\" \r\n              name=\"card_theme\" \r\n              placeholder=\"theme\"\r\n            />\r\n          </p>\r\n          <button \r\n            onClick={evt => setNewCard({...newCard, importance: !newCard.importance})}\r\n            type=\"button\" \r\n            className={newCard.importance ? \"is_important button--important\" : \"is_important\"}\r\n          >\r\n            <svg width=\"30\" height=\"30\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path\r\n                d=\"M10 19C14 19 16.5 15.1026 16.5 12.1795C16.5 6.82051 12.5 2.92308 9.5 0C10.5 2.4359 10.4484 7.34994 7 10.2308C6 9.25641 6.5 6.33333 7 5.84615C5.5 6.33333 3 8.28205 3 12.1795C3 16.0769 6 19 10 19Z\"\r\n                fill=\"#262626\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div className=\"form_buttons_wrap\">\r\n          <button type=\"submit\">add</button>\r\n          <button onClick={resetForm} type=\"reset\">cancel</button>\r\n        </div>\r\n      </article>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCardForm.propTypes = {\r\n  renderedCards:  PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      description: PropTypes.string.isRequired,\r\n      theme: PropTypes.string.isRequired,\r\n      importance: PropTypes.bool.isRequired,\r\n      done: PropTypes.bool.isRequired,\r\n    }).isRequired\r\n  ),\r\n  setRenderedCards: PropTypes.func.isRequired,\r\n  setOpenForm: PropTypes.func.isRequired \r\n}\r\n\r\nexport default AddCardForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddNewCard = ({openForm, setOpenForm}) => {\r\n\r\n\r\n  return (\r\n    <button \r\n      onClick={() => setOpenForm(!openForm)} \r\n      className={openForm ? 'hidden' : 'new_card'} \r\n      type=\"button\" \r\n    >\r\n      + add new card\r\n    </button>\r\n  );\r\n}\r\n\r\nAddNewCard.propTypes = {\r\n  openForm: PropTypes.bool.isRequired, \r\n  setOpenForm: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddNewCard;","export const getStylesForCard = (done, importance) => {\r\n  if (done) {\r\n    return 'card card--unactive';\r\n  } else if (importance) {\r\n    return 'card card--important';\r\n  } else {\r\n    return 'card';\r\n  }\r\n}\r\n\r\nexport const setBackgroundColor = (evt, classname, color) => {\r\n  if (evt.currentTarget.classList.contains(classname)) {\r\n    evt.currentTarget.style.backgroundColor = color;\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getStylesForCard } from '../utils';\r\n\r\nconst Card = ({\r\n  card, \r\n  renderedCards, \r\n  currentList, \r\n  setCurrentList, \r\n  currentCard, \r\n  setCurrentCard,\r\n  setRenderedCards}) => {\r\n\r\n  const {id, title, description, theme, done, importance} = card;\r\n\r\n  const makeCardDone = (id) => { \r\n    const doneCard = renderedCards.find(item => item.id === id);\r\n    doneCard.done = !doneCard.done;\r\n    renderedCards.splice(renderedCards.indexOf(doneCard), 1);\r\n    renderedCards.push(doneCard);\r\n    setRenderedCards([...renderedCards])\r\n  }\r\n\r\n  const deleteCard = (id) => {\r\n    setRenderedCards([...renderedCards.filter(card => card.id !== id)])\r\n  }\r\n\r\n  const dragLeaveHandler = (evt) => {\r\n    evt.target.style.boxShadow = 'none'\r\n  }\r\n  \r\n  const dragStartHandler = (evt, list, card) => {\r\n    setCurrentList(list);\r\n    setCurrentCard(card);\r\n  }\r\n  \r\n  const dragEndHandler = (evt, list, card) => {\r\n    evt.target.style.boxShadow = 'none'\r\n    setRenderedCards(renderedCards.map(item => {\r\n      if (item.id === list.id) {\r\n        return list;\r\n      }\r\n      if (item.id === currentList.id) {\r\n        return currentList;\r\n      }\r\n      return item;\r\n    }))\r\n  \r\n  }\r\n  \r\n  const dropHandler = (evt, list, card) => {\r\n    evt.preventDefault();\r\n    const currentIndex = currentList.indexOf(currentCard);\r\n    currentList.splice(currentIndex, 1);\r\n    const dropIndex = list.indexOf(card);\r\n    list.splice(dropIndex + 1, 0, currentCard);\r\n  \r\n    setRenderedCards(renderedCards.map(item => {\r\n      if (item.id === list.id) {\r\n        return list;\r\n      }\r\n      if (item.id === currentList.id) {\r\n        return currentList;\r\n      }\r\n      return item;\r\n    }))\r\n  }\r\n\r\n\r\n  return (\r\n    <article \r\n      className={getStylesForCard(done, importance)} \r\n      draggable={done ? false : true}\r\n      onDragLeave={(evt) => dragLeaveHandler(evt)}\r\n      onDragStart={(evt) => dragStartHandler(evt, renderedCards, card)}\r\n      onDragEnd={(evt) => dragEndHandler(evt, renderedCards, card)}\r\n      onDrop={(evt) => dropHandler(evt, renderedCards, card)}\r\n    >\r\n      <h3 className=\"card_title\">{title}</h3>\r\n      <p className=\"card_text\">{description}</p>\r\n      <div className=\"card_bottom_wrap\">\r\n        {theme ? <p className=\"card_theme\">{theme}</p> : null}\r\n        \r\n        {done ? \r\n            <button type=\"button\" onClick={() => deleteCard(id)} className=\"card_check\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M16 7V17C16 18.1046 15.1046 19 14 19H6C4.89543 19 4 18.1046 4 17V7L2 7V3H6.5L7.44721 1.10557C7.786 0.428005 8.47852 0 9.23607 0H10.7639C11.5215 0 12.214 0.428004 12.5528 1.10557L13.5 3H18V7L16 7ZM17 4V6L3 6V4H7.11803L8.34164 1.55279C8.51103 1.214 8.8573 1 9.23607 1H10.7639C11.1427 1 11.489 1.214 11.6584 1.55279L12.882 4H17ZM5 17C5 17.5523 5.44772 18 6 18H14C14.5523 18 15 17.5523 15 17V7H5V17Z\" fill=\"white\"/>\r\n              </svg> \r\n            </button>\r\n          :\r\n            <button type=\"button\" onClick={() => makeCardDone(id)} className=\"card_check\">\r\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path id=\"check_icon\" fillRule=\"evenodd\" clipRule=\"evenodd\"\r\n                d=\"M24 2.62787L9.54844 19.3028L0 9.75432L2.83722 6.91709L9.33855 13.4184L20.9678 0L24 2.62787Z\" fill=\"white\" />\r\n              </svg> \r\n            </button>\r\n          }\r\n\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nCard.propType = {\r\n  card: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    theme: PropTypes.string.isRequired,\r\n    importance: PropTypes.bool.isRequired,\r\n    done: PropTypes.bool.isRequired,\r\n  }).isRequired, \r\n  renderedCards:  PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      description: PropTypes.string.isRequired,\r\n      theme: PropTypes.string.isRequired,\r\n      importance: PropTypes.bool.isRequired,\r\n      done: PropTypes.bool.isRequired,\r\n    }).isRequired\r\n  ), \r\n  currentList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      title: PropTypes.string,\r\n      description: PropTypes.string,\r\n      theme: PropTypes.string,\r\n      importance: PropTypes.bool,\r\n      done: PropTypes.bool,\r\n    })\r\n  ), \r\n  setCurrentList: PropTypes.func.isRequired,\r\n  currentCard: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    title: PropTypes.string,\r\n    description: PropTypes.stringd,\r\n    theme: PropTypes.string,\r\n    importance: PropTypes.bool,\r\n    done: PropTypes.bool,\r\n  }), \r\n  setCurrentCard: PropTypes.func.isRequired,\r\n  setRenderedCards: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Card;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AddCardForm from './AddCardForm';\r\nimport AddNewCard from './AddNewCard';\r\nimport Card from './Card';\r\nimport { setBackgroundColor } from '../utils';\r\n\r\nconst List = ({list, \r\n  currentList, \r\n  setCurrentList, \r\n  currentCard, \r\n  setCurrentCard}) => { \r\n\r\n  const {listTitle, cards} = list;\r\n\r\n  const [renderedCards, setRenderedCards] = useState(cards);\r\n  const [openForm, setOpenForm] = useState(false);\r\n\r\n\r\n  const onDragOverHandler = (evt) => {\r\n    evt.preventDefault();\r\n    setBackgroundColor(evt, 'list_wrap', '#686868')    \r\n  }\r\n\r\n  const dragLeaveHandler = (evt) => {\r\n    setBackgroundColor(evt, 'list_wrap', '#353535d2');    \r\n  }\r\n\r\n  const dragEndHandler = (evt) => {\r\n    setBackgroundColor(evt, 'list_wrap', '#353535d2');    \r\n  }\r\n  \r\n  const dropCardHandler = (evt, list) => {\r\n    setBackgroundColor(evt, 'list_wrap', '#353535d2');    \r\n\r\n    if (!list.length) {\r\n      list.push(currentCard);\r\n      const currentIndex = currentList.indexOf(currentCard);\r\n      currentList.splice(currentIndex, 1);\r\n\r\n      setRenderedCards(renderedCards.map(item => {\r\n        if (item.id === list.id) {\r\n          return list;\r\n        }\r\n        if (item.id === currentList.id) {\r\n          return currentList;\r\n        }\r\n        return item;\r\n      }))\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <section \r\n      className=\"list_wrap\" \r\n      onDragOver={(evt) => onDragOverHandler(evt)}\r\n      onDragLeave={(evt) => dragLeaveHandler(evt)}\r\n      onDragEnd={(evt) => dragEndHandler(evt)}\r\n      onDrop={(evt) => dropCardHandler(evt, renderedCards)}\r\n    >\r\n      <h2 className=\"list_title\">{listTitle}</h2>\r\n\r\n      {renderedCards.map(card => {\r\n        return <Card \r\n          key={card.id} \r\n          renderedCards={renderedCards} \r\n          card={card} \r\n          currentList={currentList}\r\n          currentCard={currentCard}\r\n          setCurrentList={setCurrentList}\r\n          setCurrentCard={setCurrentCard}\r\n          setRenderedCards={setRenderedCards}\r\n        />\r\n      })}\r\n\r\n      <AddNewCard openForm={openForm} setOpenForm={setOpenForm} />\r\n\r\n      {openForm && \r\n        <AddCardForm \r\n          renderedCards={renderedCards} \r\n          setRenderedCards={setRenderedCards}  \r\n          setOpenForm={setOpenForm}\r\n        />\r\n      }\r\n      \r\n    </section>\r\n  );\r\n};\r\n\r\nList.propTypes = {\r\n  list: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    listTitle: PropTypes.string.isRequired,\r\n    cards: PropTypes.array.isRequired\r\n  }).isRequired,\r\n\r\n  currentList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      title: PropTypes.string,\r\n      description: PropTypes.string,\r\n      theme: PropTypes.string,\r\n      importance: PropTypes.bool,\r\n      done: PropTypes.bool,\r\n    })\r\n  ),\r\n  setCurrentList: PropTypes.func.isRequired, \r\n  currentCard: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    theme: PropTypes.string,\r\n    importance: PropTypes.bool,\r\n    done: PropTypes.bool,\r\n  }), \r\n  setCurrentCard: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default List;","// ДАННЫE ДЛЯ КАРТОЧЕК\r\n\r\nconst data = [\r\n  { \r\n    id: 1,\r\n    listTitle: 'Backlog',\r\n    cards: [\r\n      {\r\n        id: 11,\r\n        title: 'Twilio integration',\r\n        description: 'Create new note via SMS. Support text, audio, links, and media.',\r\n        theme: '',\r\n        importance: false,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 12,\r\n        title: 'Markdown support',\r\n        description: 'Markdown shorthand converts to formatting',\r\n        theme: 'Formatting',\r\n        importance: false,\r\n        done: false,\r\n      }\r\n    ]\r\n  },\r\n\r\n  {\r\n    id: 2,\r\n    listTitle: 'To do',\r\n    cards: [\r\n      {\r\n        id: 21,\r\n        title: 'Tablet view',\r\n        description: '',\r\n        theme: '',\r\n        importance: true,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 22,\r\n        title: 'Audio recording in note',\r\n        description: 'Show audio in a note and playback UI',\r\n        theme: 'Note interface',\r\n        importance: false,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 23,\r\n        title: 'Bookmark in note',\r\n        description: 'Show rich link UI in a note, and feature to render website screenshot.',\r\n        theme: 'Note interface',\r\n        importance: false,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 24,\r\n        title: 'Image viewer',\r\n        description: 'Opens when clicking on the thumbnail in the list or on the image in the note',\r\n        theme: '',\r\n        importance: false,\r\n        done: false,\r\n      }\r\n    ]\r\n  },\r\n\r\n  {\r\n    id: 3,\r\n    listTitle: 'In progress',\r\n    cards: [\r\n      {\r\n        id: 31,\r\n        title: 'Mobile view',\r\n        description: 'Functions for both web responsive and native apps. Note: Android and iOS will need unique share icons.',\r\n        theme: '',\r\n        importance: true,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 32,\r\n        title: 'Desktop view',\r\n        description: 'PWA for website and native apps. Note: Windows and Mac will need unique share icons.',\r\n        theme: '',\r\n        importance: true,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 33,\r\n        title: 'Formatting options',\r\n        description: 'Mobile formatting bar expands and collapses when tapping the format icon.',\r\n        theme: '',\r\n        importance: false,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 34,\r\n        title: 'Media in note',\r\n        description: 'Image & video with player UI',\r\n        theme: 'Note interface',\r\n        importance: false,\r\n        done: false,\r\n      }\r\n    ]\r\n  },\r\n\r\n  {\r\n    id: 4,\r\n    listTitle: 'Designed',\r\n    cards: [\r\n      {\r\n        id: 41,\r\n        title: 'Audio recording',\r\n        description: 'Interface for when recording a new audio note',\r\n        theme: 'New note',\r\n        importance: false,\r\n        done: false,\r\n      },\r\n      {\r\n        id: 4,\r\n        title: 'Bookmarking',\r\n        description: 'Interface for when creating a new link note.',\r\n        theme: 'New note',\r\n        importance: false,\r\n        done: false,\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport { data };","import React, { useState } from 'react';\r\nimport List from './List';\r\nimport { data } from '../data';\r\n\r\nconst Main = () => {\r\n\r\n  const [tracker, setTracker] = useState(data);\r\n\r\n  const [currentList, setCurrentList] = useState([])\r\n  const [currentCard, setCurrentCard] = useState({})\r\n\r\n  return (\r\n    <main className=\"page_wrap\">\r\n      {tracker.map(list => {\r\n        return <List \r\n          setTracker={setTracker} \r\n          key={list.id} \r\n          list={list}\r\n          currentList={currentList}\r\n          currentCard={currentCard}\r\n          setCurrentList={setCurrentList}\r\n          setCurrentCard={setCurrentCard}\r\n        />\r\n      })}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}